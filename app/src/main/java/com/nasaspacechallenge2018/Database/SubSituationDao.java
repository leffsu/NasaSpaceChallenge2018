package com.nasaspacechallenge2018.Database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SUB_SITUATION".
*/
public class SubSituationDao extends AbstractDao<SubSituation, Integer> {

    public static final String TABLENAME = "SUB_SITUATION";

    /**
     * Properties of entity SubSituation.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, int.class, "id", true, "ID");
        public final static Property SituationId = new Property(1, int.class, "situationId", false, "SITUATION_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property ComponentText = new Property(3, String.class, "componentText", false, "COMPONENT_TEXT");
    }


    public SubSituationDao(DaoConfig config) {
        super(config);
    }
    
    public SubSituationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SUB_SITUATION\" (" + //
                "\"ID\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"SITUATION_ID\" INTEGER NOT NULL ," + // 1: situationId
                "\"NAME\" TEXT," + // 2: name
                "\"COMPONENT_TEXT\" TEXT);"); // 3: componentText
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SUB_SITUATION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SubSituation entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getSituationId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String componentText = entity.getComponentText();
        if (componentText != null) {
            stmt.bindString(4, componentText);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SubSituation entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getSituationId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String componentText = entity.getComponentText();
        if (componentText != null) {
            stmt.bindString(4, componentText);
        }
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    @Override
    public SubSituation readEntity(Cursor cursor, int offset) {
        SubSituation entity = new SubSituation( //
            cursor.getInt(offset + 0), // id
            cursor.getInt(offset + 1), // situationId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // componentText
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SubSituation entity, int offset) {
        entity.setId(cursor.getInt(offset + 0));
        entity.setSituationId(cursor.getInt(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setComponentText(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Integer updateKeyAfterInsert(SubSituation entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public Integer getKey(SubSituation entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SubSituation entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
