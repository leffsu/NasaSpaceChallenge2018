package com.nasaspacechallenge2018.Database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SITUATION".
*/
public class SituationDao extends AbstractDao<Situation, Integer> {

    public static final String TABLENAME = "SITUATION";

    /**
     * Properties of entity Situation.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, int.class, "id", true, "ID");
        public final static Property MainDescription = new Property(1, String.class, "mainDescription", false, "MAIN_DESCRIPTION");
        public final static Property ComponentText = new Property(2, String.class, "componentText", false, "COMPONENT_TEXT");
        public final static Property Background = new Property(3, int.class, "background", false, "BACKGROUND");
        public final static Property Flow = new Property(4, boolean.class, "flow", false, "FLOW");
    }


    public SituationDao(DaoConfig config) {
        super(config);
    }
    
    public SituationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SITUATION\" (" + //
                "\"ID\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"MAIN_DESCRIPTION\" TEXT," + // 1: mainDescription
                "\"COMPONENT_TEXT\" TEXT," + // 2: componentText
                "\"BACKGROUND\" INTEGER NOT NULL ," + // 3: background
                "\"FLOW\" INTEGER NOT NULL );"); // 4: flow
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SITUATION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Situation entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String mainDescription = entity.getMainDescription();
        if (mainDescription != null) {
            stmt.bindString(2, mainDescription);
        }
 
        String componentText = entity.getComponentText();
        if (componentText != null) {
            stmt.bindString(3, componentText);
        }
        stmt.bindLong(4, entity.getBackground());
        stmt.bindLong(5, entity.getFlow() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Situation entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String mainDescription = entity.getMainDescription();
        if (mainDescription != null) {
            stmt.bindString(2, mainDescription);
        }
 
        String componentText = entity.getComponentText();
        if (componentText != null) {
            stmt.bindString(3, componentText);
        }
        stmt.bindLong(4, entity.getBackground());
        stmt.bindLong(5, entity.getFlow() ? 1L: 0L);
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    @Override
    public Situation readEntity(Cursor cursor, int offset) {
        Situation entity = new Situation( //
            cursor.getInt(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // mainDescription
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // componentText
            cursor.getInt(offset + 3), // background
            cursor.getShort(offset + 4) != 0 // flow
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Situation entity, int offset) {
        entity.setId(cursor.getInt(offset + 0));
        entity.setMainDescription(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setComponentText(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBackground(cursor.getInt(offset + 3));
        entity.setFlow(cursor.getShort(offset + 4) != 0);
     }
    
    @Override
    protected final Integer updateKeyAfterInsert(Situation entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public Integer getKey(Situation entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Situation entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
